#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
# This is where the buildpack is stored
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

source $BUILDPACK_DIR/bin/util

export_env_dir ${ENV_DIR}
export CI=true

: ${LIBUV_VERSION:="1.6.0"}
: ${NODE_VERSION:="4.0.0"}
: ${DNVM_BRANCH:="dev"}
: ${DNX_VERSION:="latest"}

if [ -n "$BUILD_DEBUG" ]; then
	DNU_FLAGS=""
	echo "DNX_VERSION: ${DNX_VERSION}"
	echo "DNVM_BRANCH: ${DNVM_BRANCH}"
else
	DNU_FLAGS="--quiet"
fi

SRC_DIR=`mktemp -d`
# Move the app source code into temporary src dir using subshell to not leak shopt
(
	shopt -s dotglob
	mv ${BUILD_DIR}/* ${SRC_DIR}
)

mkdir -p ${CACHE_DIR}

echo "ASP.NET 5 CORECLR"

echo "Install package"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

apt-get $APT_OPTIONS update | indent

apt-get $APT_OPTIONS -y --force-yes -d install libunwind8 gettext libcurl3-dev | indent

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

export PATH="$PATH:$BUILD_DIR/.apt/usr/bin"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

# TODO: This test doesn't seen to actually work
if [[ -n $(find . -type f -iname package.json -o -iname bower.json ) ]]
then
	echo "Installing Node"
	NODE_PATH=`mktemp -d`
	curl https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz -Ls \
		| tar xz -C ${NODE_PATH}
	export PATH="${NODE_PATH}/node-v${NODE_VERSION}-linux-x64/bin:${PATH}"

	echo "installing bower"
	if ! hash bower 2>/dev/null; then
		npm install -g bower
	fi
fi

# Install DNX
# TODO: consider making this not dependent on GitHub being up
touch ~/.profile
curl -sSL https://raw.githubusercontent.com/aspnet/Home/${DNVM_BRANCH}/dnvminstall.sh \
	| sh && source ~/.dnx/dnvm/dnvm.sh

export DNVM_RUNTIME_LOCAL_CACHE="/app/.dnx"
export DNVM_RUNTIME_CACHE_LOCATION="${CACHE_DIR}/dnx/runtimes"
mkdir -p ${DNVM_RUNTIME_LOCAL_CACHE}
mkdir -p ${DNVM_RUNTIME_CACHE_LOCATION}
ln -s ${DNVM_RUNTIME_CACHE_LOCATION} ${DNVM_RUNTIME_LOCAL_CACHE}/runtimes

if [ -n "$(find ${SRC_DIR}/global.json)" ]; then
	echo "Get version from global.json"
	DNX_VERSION=$(ruby -rjson -e "j = JSON.parse(File.open('${SRC_DIR}/global.json','r:bom|utf-8').read); unless j['sdk'].nil? ; puts j['sdk']['version'];end")
	echo "${DNX_VERSION:=latest}"
fi

DEPLOYMENT_FILE_LOCATION=${SRC_DIR}/.deployment
if [ -n "$UNSTABLE_TOOLCHAIN" ]; then
	echo "DNVM flags configured in UNSTABLE_TOOLCHAIN environment variable"
	echo "Downloading ASP.NET 5 unstable $DNX_VERSION"
	DNVM_FLAGS="-u"
elif [ $(awk -F "=" '/stable/ {print $2}' ${DEPLOYMENT_FILE_LOCATION} | tr -d ' ') == "false" ]; then
	echo "DNVM flags configured in .deployment file"
	echo "Downloading ASP.NET 5 unstable $DNX_VERSION"
	DNVM_FLAGS="-u"
else
	echo "Downloading ASP.NET 5 stable $DNX_VERSION"
	DNVM_FLAGS=""
fi

dnvm install $DNX_VERSION $DNVM_FLAGS -r coreclr -a default

# Add DNX to the build output
DNX_BUILD_LOCATION=${BUILD_DIR}/.dnx/runtimes/
mkdir -p ${DNX_BUILD_LOCATION}
DNX_VERSION=$(dnvm alias default)
cp -r ~/.dnx/runtimes/$DNX_VERSION ${DNX_BUILD_LOCATION}

if [ -n "$PROJECT" ]; then
	PROJECT_JSON_FILE=${SRC_DIR}/${PROJECT}
	echo "Project file configured in PROJECT environment variable"
elif [ -e ${DEPLOYMENT_FILE_LOCATION} ]; then
	PROJECT_JSON_FILE=${SRC_DIR}/$(awk -F "=" '/project/ {print $2}' ${DEPLOYMENT_FILE_LOCATION} | tr -d ' ')
	echo "Project file configured in .deployment file"
else
	PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 3 -iname "project.json")
	printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
	PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)
fi
echo "Building ${PROJECT_JSON_FILE}"

PROJECT_DIR="$PROJECT_JSON_FILE"
if [[ -f $PROJECT_JSON_FILE ]]; then
	PROJECT_DIR=$(dirname $PROJECT_JSON_FILE)
fi

export DNU_LOCAL_CACHE="/app/.local/share/dnu"
export DNU_CACHE_LOCATION="${CACHE_DIR}/dnu/cache"
mkdir -p ${DNU_LOCAL_CACHE}
mkdir -p ${DNU_CACHE_LOCATION}
ln -s ${DNU_CACHE_LOCATION} ${DNU_LOCAL_CACHE}/cache 

# beta7's bug
ruby -rjson -e "j = JSON.parse(File.open('${PROJECT_DIR}/project.json','r:bom|utf-8').read);core=j['frameworks']['dnxcore50']||'{}';j.delete('frameworks');j['frameworks']={dnxcore50:core};print(j.to_json);" > ${PROJECT_DIR}/project.tmp.json 
mv ${PROJECT_DIR}/project.tmp.json ${PROJECT_DIR}/project.json

dnu restore $DNU_FLAGS ${PROJECT_JSON_FILE}

# configure some npm command during building
export PATH="${PROJECT_DIR}/node_modules/.bin:${PATH}"

echo "Publishing the app"
# publishing with a runtime won't produce dependencies of other platform
# Stuck on installing package using bower in Node 0.12. Why?
dnu publish --out ${BUILD_DIR} $DNU_FLAGS --no-source --configuration Release ${PROJECT_JSON_FILE} --runtime $DNX_VERSION

echo "Publish Successed"

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${BUILDPACK_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

curl https://github.com/friism/libuv-builder/releases/download/v${LIBUV_VERSION}/libuv-${LIBUV_VERSION}.tar.gz -sL \
	 | tar xz -C ${BUILD_DIR}
if [ -e ${SRC_DIR}/Procfile ]; then
	cp ${SRC_DIR}/Procfile ${BUILD_DIR}
else
	cat << EOT >> ${BUILD_DIR}/Procfile
web: ./kestrel --server.urls http://+:\$PORT &> err.txt > logs.txt
EOT
fi